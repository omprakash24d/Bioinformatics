# -*- coding: utf-8 -*-
"""Optimal Global Sequence Alignment Using the Needleman-Wunsch Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u46txJhc_BwykJYLRu0ux-XDmZRR0zP1
"""

def needleman_wunsch(seq1, seq2, match=2, mismatch=-1, gap=-2):
    # Initialize the scoring matrix
    rows, cols = len(seq2) + 1, len(seq1) + 1
    matrix = [[0] * cols for _ in range(rows)]

    # Initialize the first row and column with gap penalties
    for i in range(1, rows):
        matrix[i][0] = matrix[i-1][0] + gap
    for j in range(1, cols):
        matrix[0][j] = matrix[0][j-1] + gap

    # Fill the scoring matrix
    for i in range(1, rows):
        for j in range(1, cols):
            match_mismatch = matrix[i-1][j-1] + (match if seq1[j-1] == seq2[i-1] else mismatch)
            delete = matrix[i-1][j] + gap
            insert = matrix[i][j-1] + gap
            matrix[i][j] = max(match_mismatch, delete, insert)

    # Trace back to find the alignment
    align1, align2 = '', ''
    i, j = rows - 1, cols - 1
    while i > 0 or j > 0:
        current_score = matrix[i][j]
        diagonal = matrix[i-1][j-1] if i > 0 and j > 0 else float('-inf')
        left = matrix[i][j-1] if j > 0 else float('-inf')
        up = matrix[i-1][j] if i > 0 else float('-inf')

        if i > 0 and j > 0 and current_score == diagonal + (match if seq1[j-1] == seq2[i-1] else mismatch):
            align1 = seq1[j-1] + align1
            align2 = seq2[i-1] + align2
            i -= 1
            j -= 1
        elif j > 0 and current_score == left + gap:
            align1 = seq1[j-1] + align1
            align2 = '-' + align2
            j -= 1
        elif i > 0 and current_score == up + gap:
            align1 = '-' + align1
            align2 = seq2[i-1] + align2
            i -= 1

    # Save the results to a file and display in tabular form
    with open('needleman_wunsch_output.txt', 'w') as f:
        f.write("Alignment Matrix:\n")
        for row in matrix:
            f.write(' '.join(map(str, row)) + '\n')

        f.write("\nOptimal Alignment:\n")
        f.write("Sequence 1: " + align1 + '\n')
        f.write("Sequence 2: " + align2 + '\n')

    # Display the results in tabular form for easy understanding
    print("Alignment Matrix:")
    for row in matrix:
        print(' '.join(map(str, row)))

    print("\nOptimal Alignment:")
    print("Sequence 1:", align1)
    print("Sequence 2:", align2)

    return align1, align2

# Take inputs from the user
sequence1 = input("Enter Sequence 1: ").upper()
sequence2 = input("Enter Sequence 2: ").upper()

match_score = int(input("Enter the match score: "))
mismatch_score = int(input("Enter the mismatch score: "))
gap_penalty = int(input("Enter the gap penalty: "))

# Example usage
alignment1, alignment2 = needleman_wunsch(sequence1, sequence2, match=match_score, mismatch=mismatch_score, gap=gap_penalty)

print("\nThe details have been saved to 'needleman_wunsch_output.txt'.")